#ifndef __POINTS_H__
#define __POINTS_H__

#include <cstdio>

#include "object_pos.h"
#include "err.h"

/// @brief  Структура для представления точки
struct point_t
{
    double x;
    double y;
    double z;
};

/// @brief  Структура для представления массива точек
struct points_t
{
    point_t *arr;  /// Динамический массив
    size_t size;   /// Размер массива
};

/**
 * @brief Получает размер списка точек.
 * 
 * Возвращает количество точек в списке points.
 * 
 * @param points Константная ссылка на структуру points_t, список точек.
 * @return Размер списка точек.
 */
size_t get_points_size(const points_t &points);

/**
 * @brief Инициализирует список точек.
 * 
 * Устанавливает указатель на массив точек в NULL и устанавливает размер списка точек в 0.
 * 
 * @param points Ссылка на структуру points_t, список точек, который требуется инициализировать.
 */
void points_init(points_t &points);

/**
 * @brief Вводит список точек из файла.
 * 
 * Считывает список точек из файла и инициализирует список points.
 * 
 * @param points Ссылка на структуру points_t, список точек, в который будут считаны данные.
 * @param f Указатель на файл, из которого производится считывание.
 * @return Код ошибки (0 в случае успеха).
 */
err_t points_input(points_t &points, FILE *f);

/**
 * @brief Перемещает все точки списка.
 * 
 * Перемещает все точки списка points на указанные коэффициенты смещения.
 * 
 * @param points Ссылка на структуру points_t, список точек, который требуется переместить.
 * @param coefs Константная ссылка на структуру move_t, содержащую коэффициенты смещения.
 * @return Код ошибки (0 в случае успеха).
 */
err_t points_move(points_t &points, const move_t &coefs);

/**
 * @brief Масштабирует все точки списка относительно указанного центра.
 * 
 * Масштабирует все точки списка points относительно указанного центра.
 * 
 * @param points Ссылка на структуру points_t, список точек, который требуется масштабировать.
 * @param center Ссылка на точку типа point_t, являющуюся центром масштабирования.
 * @param coefs Константная ссылка на структуру scale_t, содержащую коэффициенты масштабирования.
 * @return Код ошибки (0 в случае успеха).
 */
err_t points_scale(points_t &points, const point_t &center, const scale_t &coefs);

/**
 * @brief Поворачивает все точки списка относительно указанного центра.
 * 
 * Поворачивает все точки списка points относительно указанного центра.
 * 
 * @param points Ссылка на структуру points_t, список точек, который требуется повернуть.
 * @param center Ссылка на точку типа point_t, являющуюся центром поворота.
 * @param coefs Константная ссылка на структуру rotate_t, содержащую коэффициенты поворота.
 * @return Код ошибки (0 в случае успеха).
 */
err_t points_rotate(points_t &points,const point_t &center,  const rotate_t &coefs);

/**
 * @brief Освобождает память, занятую списком точек.
 * 
 * Освобождает память, занятую массивом точек в списке, и устанавливает указатель на массив точек в NULL.
 * 
 * @param points Ссылка на структуру points_t, список точек, память которого требуется освободить.
 */
void points_free(points_t &points);

#endif
