#ifndef __OBJ_H__
#define __OBJ_H__

#include "object_pos.h"
#include "points.h"
#include "edges.h"
#include "draw.h"
#include "err.h"

/// @brief  Структура для представления объекта
struct object_t
{
    points_t points;  /// Массив точек
    edges_t edges;    /// Массив ребер
};

/**
 * @brief Инициализирует объект.
 * 
 * Создает и инициализирует объект типа object_t.
 * Инициализирует список точек и список ребер объекта.
 * 
 * @return Инициализированный объект типа object_t.
 */
object_t &obj_init(void);

/**
 * @brief Копирует объект.
 * 
 * Копирует данные объекта src в объект dst.
 * 
 * @param dst Ссылка на объект типа object_t, в который будут скопированы данные.
 * @param src Константная ссылка на объект типа object_t, данные которого будут скопированы.
 */
void obj_cpy(object_t &dst, const object_t &src);

/**
 * @brief Загружает объект из файла.
 * 
 * Загружает данные объекта из файла и инициализирует объект obj.
 * 
 * @param obj Ссылка на объект типа object_t, в который будут загружены данные.
 * @param filename Строка с именем файла, из которого производится загрузка данных.
 * @return Код ошибки (0 в случае успеха).
 */
err_t obj_load(object_t &obj, const char *filename);

/**
 * @brief Проверяет корректность объекта.
 * 
 * Проверяет корректность объекта obj путем проверки соответствия количества ребер и точек.
 * 
 * @param obj Ссылка на объект типа object_t, который требуется проверить.
 * @return Код ошибки (0 в случае успеха).
 */
err_t obj_verify(object_t &obj);

/**
 * @brief Отрисовывает объект на сцене.
 * 
 * Очищает сцену и затем отрисовывает ребра объекта на ней, используя точки объекта.
 * 
 * @param obj Константная ссылка на объект типа object_t, который требуется отрисовать.
 * @param scene Константная ссылка на сцену типа scene_t, на которой будет производиться отрисовка.
 * @return Код ошибки (0 в случае успеха).
 */
err_t obj_draw(const object_t &obj, const scene_t &scene);

/**
 * @brief Перемещает объект.
 * 
 * Перемещает объект obj на указанные коэффициенты смещения.
 * 
 * @param obj Ссылка на объект типа object_t, который требуется переместить.
 * @param coefs Константная ссылка на структуру move_t, содержащую коэффициенты смещения.
 * @return Код ошибки (0 в случае успеха).
 */
err_t obj_move(object_t &obj, const move_t &coefs);

/**
 * @brief Масштабирует объект.
 * 
 * Масштабирует объект obj относительно указанного центра.
 * 
 * @param obj Ссылка на объект типа object_t, который требуется масштабировать.
 * @param center Ссылка на точку типа point_t, являющуюся центром масштабирования.
 * @param coefs Константная ссылка на структуру scale_t, содержащую коэффициенты масштабирования.
 * @return Код ошибки (0 в случае успеха).
 */
err_t obj_scale(object_t &obj, point_t &center, const scale_t &coefs);

/**
 * @brief Поворачивает объект.
 * 
 * Поворачивает объект obj относительно указанного центра.
 * 
 * @param obj Ссылка на объект типа object_t, который требуется повернуть.
 * @param center Ссылка на точку типа point_t, являющуюся центром поворота.
 * @param coefs Константная ссылка на структуру rotate_t, содержащую коэффициенты поворота.
 * @return Код ошибки (0 в случае успеха).
 */
err_t obj_rotate(object_t &obj, point_t &center, const rotate_t &coefs);

/**
 * @brief Освобождает память, занятую объектом.
 * 
 * Освобождает память, занятую списками точек и ребер объекта.
 * 
 * @param obj Ссылка на объект типа object_t, память которого требуется освободить.
 */
void obj_free(object_t &obj);

#endif
