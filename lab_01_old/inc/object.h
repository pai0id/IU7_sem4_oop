#ifndef __OBJECT_H__
#define __OBJECT_H__

#include <GL/glut.h>

typedef struct
{
    GLfloat angleX;         // Угол поворота объекта по оси X
    GLfloat angleY;         // Угол поворота объекта по оси Y
    GLfloat scale;          // Масштаб объекта
    GLfloat translateX;     // Смещение объекта по оси X
    GLfloat translateY;     // Смещение объекта по оси Y
} object_pos_t;             // Структура для хранения позиции объекта

typedef struct
{
    GLfloat (*vertices)[3]; // Массив вершин объекта
    GLubyte (*edges)[2];    // Массив рёбер объекта
    int numVertices;        // Количество вершин объекта
    int numEdges;           // Количество рёбер объекта
    object_pos_t position;  // Позиция объекта
} object_t;                 // Структура для хранения объекта

/**
 * @brief Инициализация объекта.
 *
 * Функция выделяет память под объект типа object_t и инициализирует его поля:
 * массив вершин, массив рёбер, количество вершин, количество рёбер,
 * углы поворота по осям X и Y, масштаб, смещение по осям X и Y.
 *
 * @return Указатель на объект типа object_t, инициализированный значениями по умолчанию.
 * Если не удалось выделить память, возвращается NULL.
 */
object_t *init_object(void);

/**
 * @brief Сброс состояния объекта.
 *
 * Функция освобождает память, выделенную под массивы вершин и рёбер объекта,
 * и сбрасывает значения полей объекта на значения по умолчанию.
 *
 * @param obj Указатель на объект типа object_t, который нужно сбросить.
 */
void reset_object(object_t *obj);

/**
 * @brief Уничтожение объекта.
 *
 * Функция освобождает память, выделенную под массивы вершин и рёбер объекта,
 * и сам объект.
 *
 * @param obj Указатель на объект типа object_t, который нужно уничтожить.
 */
void destroy_object(object_t *obj);

#endif
